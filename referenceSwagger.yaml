openapi: 3.0.0
info:
  title: Canopus CMS User API
  description: CMS User API
  version: 1.0.0
servers: [{ url: "/api/user" }]
paths:
  /auth/verify/:
    post:
      tags:
        - "Auth"
      summary: "Verify User"
      operationId: "VerifyUser"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                password:
                  type: string
              required:
                - id
                - name
                - password
      responses:
        "200":
          description: OK
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"

  /auth/forgot/:
    post:
      tags:
        - "Auth"
      summary: "Forgot Password"
      operationId: "ForgotPassword"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        "200":
          description: OK
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"

  /auth/reset/:
    post:
      tags:
        - "Auth"
      summary: "Reset Password"
      operationId: "ResetPassword"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: string
                password:
                  type: string
              required:
                - id
                - password
      responses:
        "200":
          description: OK
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"

  /auth/login/:
    post:
      tags:
        - "Auth"
      summary: "Login User"
      operationId: "LoginUser"
      parameters:
        - in: header
          name: toogle_reference
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description: Login toggle reference allows only DM / OTT
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: OK
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"

  /:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - "Users"
      summary: "List User"
      operationId: "ListUser"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: query
          name: name_contains
          required: false
          description: |
            Search the user by name contains

            For Example: User
          schema:
            type: string
        - in: query
          name: name_startswith
          required: false
          description: |
            Search the user by name starts with

            For Example: 'G'
          schema:
            type: string
        - in: query
          name: name_contains_number
          required: false
          description: |
            Search the user by name contains number

            Available option : true
          schema:
            type: string
        - in: query
          name: filter_by
          required: false
          description: |
            Available options all, active and inactive

            Default value 'all'
          schema:
            enum: ["all", "active", "inactive"]
            default: "all"
        - in: query
          name: roleName
          required: false
          description: |
            Filter user by role names

            Pass the comma separated role names to filter the user.      
            For Example: Admin,User

            Note: The above role names may not be valid.
          schema:
            type: string
        - in: query
          name: role
          required: false
          description: |
            Filter user by roles

            Pass the comma separated roles id to filter the user.      
            For Example: 5f74aeed6d60ee1b6c30df72

            Note: The above roles ids may not be valid.
          schema:
            type: string

        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: |
            Current Page

            Default value is 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: |
            Documents per page

            Default value is 10
        - in: query
          name: sortBy
          required: false
          description: |
            Default value 'lastActiveOn'
          schema:
            type: string
        - in: query
          name: orderBy
          required: false
          schema:
            enum: ["asc", "desc"]
            default: "desc"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - "Users"
      summary: "Add User"
      operationId: "AddUser"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AddUser"
      responses:
        "201":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
  /all-users:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - "Users"
      summary: "List User without role authorization check"
      operationId: "ListUserWithoutAuthorization"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: query
          name: name_contains
          required: false
          description: |
            Search the user by name contains

            For Example: User
          schema:
            type: string
        - in: query
          name: name_startswith
          required: false
          description: |
            Search the user by name starts with

            For Example: 'G'
          schema:
            type: string
        - in: query
          name: name_contains_number
          required: false
          description: |
            Search the user by name contains number

            Available option : true
          schema:
            type: string
        - in: query
          name: filter_by
          required: false
          description: |
            Available options all, active and inactive

            Default value 'all'
          schema:
            enum: ["all", "active", "inactive"]
            default: "all"
        - in: query
          name: roleName
          required: false
          description: |
            Filter user by role names

            Pass the comma separated role names to filter the user.      
            For Example: Admin,User

            Note: The above role names may not be valid.
          schema:
            type: string
        - in: query
          name: role
          required: false
          description: |
            Filter user by roles

            Pass the comma separated roles id to filter the user.      
            For Example: 5f74aeed6d60ee1b6c30df72

            Note: The above roles ids may not be valid.
          schema:
            type: string

        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: |
            Current Page

            Default value is 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: |
            Documents per page

            Default value is 10
        - in: query
          name: sortBy
          required: false
          description: |
            Default value 'lastActiveOn'
          schema:
            type: string
        - in: query
          name: orderBy
          required: false
          schema:
            enum: ["asc", "desc"]
            default: "desc"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
  /{id}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - "Users"
      summary: "Get User By Id"
      operationId: "GetUserById"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - "Users"
      summary: "Delete User By Id"
      operationId: "DeleteUserById"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - "Users"
      summary: "Update User"
      operationId: "UpdateUser"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
  /{id}/{status}:
    patch:
      security:
        - ApiKeyAuth: []
      tags:
        - "Users"
      summary: "Update User Status"
      operationId: "UpdateUserStatus"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: status
          required: true
          schema:
            enum: ["active", "inactive"]
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"

  /profile/:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - "Profile"
      summary: "Get Profile"
      operationId: "GetProfile"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - "Profile"
      summary: "Update Profile"
      operationId: "UpdateProfile"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UpdateProfile"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
  /profile/changePassword:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - "Profile"
      summary: "Change Password"
      operationId: "ChangePassword"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - oldPassword
                - newPassword
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
  /profile/api-key/:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - "Profile"
      summary: "List User API Keys"
      operationId: "ListUserAPIKeys"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: query
          name: name_contains
          required: false
          description: |
            Search the API Key by name contains

            For Example: User
          schema:
            type: string
        - in: query
          name: name_startswith
          required: false
          description: |
            Search the API Key by name starts with

            For Example: 'G'
          schema:
            type: string
        - in: query
          name: name_contains_number
          required: false
          description: |
            Search the API Key by name contains number

            Available option : true
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: |
            Current Page

            Default value is 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: |
            Documents per page

            Default value is 10
        - in: query
          name: sortBy
          required: false
          description: |
            Default value 'createdAt'
          schema:
            type: string
        - in: query
          name: orderBy
          required: false
          schema:
            enum: ["asc", "desc"]
            default: "asc"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - "Profile"
      summary: "Generate API Key"
      operationId: "GenerateAPIKey"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
  /profile/api-key/{id}:
    delete:
      security:
        - ApiKeyAuth: []
      tags:
        - "Profile"
      summary: "Delete User API Key By Id"
      operationId: "DeleteUserAPIKeyById"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"

  /activity:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - "Activity"
      summary: "List User Activities"
      operationId: "ListUserActivity"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
        - in: query
          name: email
          required: true
          description: |
            Get list of user activity by email

            For Example: example@example.com
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: |
            Current Page

            Default value is 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: |
            Documents per page

            Default value is 10
        - in: query
          name: sortBy
          required: false
          description: |
            Default value 'createdAt'
          schema:
            type: string
        - in: query
          name: orderBy
          required: false
          schema:
            enum: ["asc", "desc"]
            default: "desc"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - "Activity"
      summary: "Add User activity"
      operationId: "AddUserActivity"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserActivity"
      responses:
        "201":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"

  /reset-user-password:
    put:
      security:
        - ApiKeyAuth: []
      tags:
        - "Reset User Password"
      summary: "Reset User Password"
      operationId: "reset-user-pass"
      parameters:
        - in: header
          name: app_id
          schema:
            type: string
            default: OTT
            enum:
              - OTT
              - DM
          required: true
          description:  allows only DM / OTT
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UpdateUserPass"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "400":
          description: "Invalid"
        "404":
          description: "Not Found"
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      description: |
        Bearer \<token\>
        <br/>OR<br/>
        ottplay-apikey \<apikey\>
      name: Authorization
  schemas:
    RegisterUser:
      title: User Register
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password
    AddUser:
      title: Add User
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        roleName:
          type: string
        phone:
          type: string
        city:
          type: string
        country:
          type: string
        app_id:
          type: string
      required:
        - email
        - role
        - roleName
        - app_id
    UpdateUser:
      title: Update User
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        role:
          type: string
        roleName:
          type: string
        app_id:
          type: string
        phone:
          type: string
        city:
          type: string
        country:
          type: string
        profileImg:
          type: string
        urlTwitter:
          type: string
        urlFacebook:
          type: string
        urlInstagram:
          type: string
        urlLinkdin:
          type: string
        bio:
          type: string
      required:
        - name
        - email
        - role
        - roleName
        - app_id
    UpdateUserPass:
      title: Update User Pass
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - _id
        - email
        - password
    UpdateProfile:
      title: Update Profile
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        city:
          type: string
        country:
          type: string
      required:
        - name
    UserActivity:
      title: User Activity
      type: object
      properties:
        eventName:
          type: string
        event:
          type: object
        contextDetails:
          type: object
      required:
        - eventName
        - event
        - contextDetails
